---
description: Generating a Product Requirements Document (PRD)
globs:
  - ".ai/tasks/*.md"
alwaysApply: false
---

# Rule: Generating a Product Requirements Document (PRD)

## Goal

To guide an AI assistant in creating a detailed Product Requirements Document (PRD) in Markdown format, based on an initial user prompt. The PRD should be clear, actionable, and suitable for a junior developer to understand and implement the feature.

## Process

1. **Receive Initial Prompt:** The user provides a brief description or request for a new feature or functionality.  
2. **Ask Clarifying Questions:** Before writing the PRD, the AI *must* ask clarifying questions to gather sufficient detail. The goal is to understand the "what" and "why" of the feature, not necessarily the "how" (which the developer will figure out).  
3. **Generate PRD:** Based on the initial prompt and the user's answers to the clarifying questions, generate a PRD using the structure outlined below.  
4. **Save PRD:** Save the generated document as `prd-[feature-name].md` inside the `.ai/tasks` directory.

## Clarifying Questions Format

When asking clarifying questions, the AI *must* format them as a numbered list. This list should support nested sub-questions using dot notation (e.g., 1, 2, 2.1, 2.2, 3).

Example format:  
1. Top-level question 1?  
2. Top-level question 2?  
2.1. Sub-question related to question 2?  
2.2. Another sub-question related to question 2?  
3. Top-level question 3?

There should only be one atomic question per list item.

The AI should adapt its *actual questions* based on the user's initial prompt, aiming to cover relevant areas like:

- **Problem/Goal:** What problem does this feature solve? What is the primary goal?  
- **Target User:** Who is this feature for?  
- **Core Functionality:** What are the essential actions the user must be able to perform?  
- **User Stories:** Can you provide examples like "As a [user], I want to [action] so that [benefit]"?  
- **Acceptance Criteria:** How do we define success for this feature?  
- **Scope/Boundaries:** What should this feature explicitly *not* do?  
- **Data:** What information needs to be displayed or managed?  
- **Design/UI:** Are there mockups or specific UI preferences?  
- **Edge Cases:** What potential errors or unusual situations should be considered?

## PRD Structure

The generated PRD should include the following sections:

1. **Introduction/Overview:** Briefly describe the feature and the problem it solves. State the goal.  
2. **Goals:** List the specific, measurable objectives for this feature.  
3. **User Stories:** Detail the user narratives describing feature usage and benefits.  
4. **Functional Requirements:** List the specific functionalities the feature must have. Use clear, concise language (e.g., "The system must allow users to upload a profile picture."). Number these requirements.  
5. **Non-Goals (Out of Scope):** Clearly state what this feature will *not* include to manage scope.  
6. **Design Considerations (Optional):** Link to mockups, describe UI/UX requirements, or mention relevant components/styles if applicable.  
7. **Technical Considerations (Optional):** Mention any known technical constraints, dependencies, or suggestions (e.g., "Should integrate with the existing Auth module").  
8. **Success Metrics:** How will the success of this feature be measured? (e.g., "Increase user engagement by 10%", "Reduce support tickets related to X").  
9. **Open Questions:** List any remaining questions or areas needing further clarification.

## Target Audience

Assume the primary reader of the PRD is a **junior developer**. Therefore, requirements should be explicit, unambiguous, and avoid jargon where possible. Provide enough detail for them to understand the feature's purpose and core logic.

## Output

- **Format:** Markdown (`.md`)  
- **Location:** `/tasks/`  
- **Filename:** `prd-[meaningful-feature-name].md` (e.g., `prd-user-profile-editing.md`)

## Final instructions

1. Do NOT start implementing the PRD  
2. Make sure to ask the user clarifying questions  
3. Take the user's answers to the clarifying questions and improve the PRD
